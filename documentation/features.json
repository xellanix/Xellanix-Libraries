{
    "version": "1.1.0.1291",
    "xlib": [
        {
            "name": "Utility",
            "items": [
                {
                    "name": "cast_to",
                    "type": "func",
                    "namespace": "xellanix::utility",
                    "infile": "utility.h",
                    "description": "Casts a value from one type (source) to another type (target).",
                    "anyParams": [
                        {
                            "returnType": "constexpr T",
                            "returnDescription": "a T value containing the converted value",
                            "templateParam": "typename T, typename S",
                            "templateParamDescription": "T: Desired target type<br/>S: Source type",
                            "functionParam": "S const value",
                            "functionParamDescription": "value: The value to be cast, of type S",
                            "definedType": ["T", "S"]
                        }
                    ]
                },
                {
                    "name": "make_signed",
                    "type": "func",
                    "namespace": "xellanix::utility",
                    "infile": "utility.h",
                    "description": "Converts an integral or enumeration type T to its signed equivalent U.",
                    "anyParams": [
                        {
                            "returnType": "constexpr U",
                            "returnDescription": "A value of type U representing the signed version of n",
                            "templateParam": "typename T",
                            "templateParamDescription": "T: Input type to be converted",
                            "functionParam": "T n",
                            "functionParamDescription": "n: The input value of type T",
                            "definedType": ["T", "U"]
                        }
                    ]
                },
                {
                    "name": "make_unsigned",
                    "type": "func",
                    "namespace": "xellanix::utility",
                    "infile": "utility.h",
                    "description": "Converts an integral or enumeration type T to its unsigned equivalent U.",
                    "anyParams": [
                        {
                            "returnType": "constexpr U",
                            "returnDescription": "A value of type U representing the unsigned version of n",
                            "templateParam": "typename T",
                            "templateParamDescription": "T: Input type to be converted",
                            "functionParam": "T n",
                            "functionParamDescription": "n: The input value of type T",
                            "definedType": ["T", "U"]
                        }
                    ]
                },
                {
                    "name": "make_array",
                    "type": "func",
                    "namespace": "xellanix::utility",
                    "infile": "utility.h",
                    "description": "Creates an std::array by collecting any arguments. It automatically deduces the element type (first_t) based on the common type of all the arguments and initializes the array with the forwarded arguments.",
                    "anyParams": [
                        {
                            "returnType": "constexpr std::array&lt;std::common_type_t&lt;T...&gt;, sizeof...(T)&gt;",
                            "returnDescription": "An std::array object with the deduced element type first_t and size equal to the number of arguments (sizeof...(T))",
                            "templateParam": "typename... T",
                            "templateParamDescription": "T...: A pack of arguments of any types",
                            "functionParam": "T&&...t",
                            "functionParamDescription": "t: A pack of values to be inserted into the array",
                            "definedType": ["T", "array", "common_type_t"]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Arithmetic",
            "items": [
                {
                    "name": "number",
                    "type": "object",
                    "namespace": "xellanix::type",
                    "infile": "number.h",
                    "description": "A data type for holding integral or floating-point data."
                }
            ]
        },
        {
            "name": "Arithmetic Helper",
            "items": [
                {
                    "name": "nmin",
                    "type": "func",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "nmax",
                    "type": "func",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "limit_range",
                    "type": "func",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "is_same_limit",
                    "type": "func",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                }
            ]
        },
        {
            "name": "Arithmetic Type Trait",
            "items": [
                {
                    "name": "enable_if_arithm",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_arithms",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_arithm_t",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_arithms_t",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_integral",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_integrals",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_floating_point",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_floating_points",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "is_same_r_v",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_same",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_same_t",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_any_numerics",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_signed",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_unsigned",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                },
                {
                    "name": "enable_if_any_signed",
                    "type": "alias",
                    "namespace": "xellanix::type::helper",
                    "infile": "number_helper.h",
                    "description": ""
                }
            ]
        },
        {
            "name": "Arithmetic Logical",
            "items": [
                {
                    "name": "is_negative",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_logical.h",
                    "description": ""
                },
                {
                    "name": "is_positive",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_logical.h",
                    "description": ""
                },
                {
                    "name": "is_inf",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_logical.h",
                    "description": ""
                },
                {
                    "name": "is_nan",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_logical.h",
                    "description": ""
                },
                {
                    "name": "is_divres_int",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_logical.h",
                    "description": ""
                }
            ]
        },
        {
            "name": "Arithmetic Comparer",
            "items": [
                {
                    "name": "equal",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "compare_helper.h",
                    "description": ""
                },
                {
                    "name": "not_equal",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "compare_helper.h",
                    "description": ""
                },
                {
                    "name": "less",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "compare_helper.h",
                    "description": ""
                },
                {
                    "name": "less_eq",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "compare_helper.h",
                    "description": ""
                },
                {
                    "name": "greater",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "compare_helper.h",
                    "description": ""
                },
                {
                    "name": "greater_eq",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "compare_helper.h",
                    "description": ""
                }
            ]
        },
        {
            "name": "Arithmetic Operation",
            "items": [
                {
                    "name": "abs",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_op.h",
                    "description": ""
                },
                {
                    "name": "ceil",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_op.h",
                    "description": ""
                },
                {
                    "name": "floor",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_op.h",
                    "description": ""
                },
                {
                    "name": "trunc",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_op.h",
                    "description": ""
                },
                {
                    "name": "mod",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_op.h",
                    "description": ""
                },
                {
                    "name": "mod_floor",
                    "type": "func",
                    "namespace": "xellanix::math",
                    "infile": "math_op.h",
                    "description": ""
                }
            ]
        },
        {
            "name": "Locale & Format",
            "items": [
                {
                    "name": "utf8cvt",
                    "type": "object",
                    "namespace": "xellanix::cvt",
                    "infile": "locale_cvt.h",
                    "description": ""
                },
                {
                    "name": "thousand_sep",
                    "type": "object",
                    "namespace": "xellanix::formatter",
                    "infile": "formatter.h",
                    "description": ""
                },
                {
                    "name": "add_num_sep",
                    "type": "func",
                    "namespace": "xellanix::formatter",
                    "infile": "formatter.h",
                    "description": ""
                }
            ]
        }
    ]
}